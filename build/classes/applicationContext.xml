<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">


	<!--下面是redis配置start  -->
	
	<!-- 读取properties配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:cache.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- redis连接池配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxActive" value="${redis.maxActive}"/>
		<property name="maxIdle" value="${redis.maxIdle}"/>
		<property name="minIdle" value="${redis.minIdle}"/>
		<property name="maxWait" value="${redis.maxWait}"/>
		<property name="testOnBorrow" value="${redis.testOnBorrow}"/>
	</bean>
	
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig"/>
		<constructor-arg index="1" value="${redis.server}"/>
		<constructor-arg index="2" value="${redis.port}" type="int"/>
	</bean>
	
	
	<bean id="redisTemplate" class="com.suyin.server.redis.JedisUtil">
		<!-- 
		<property name="jedisPool" ref="jedisPool"/> -->
	</bean>
	
	<!--redis配置end  -->
	
	 <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="username" value="root"/>
		<property name="password" value="root"/>
		<property name="url" value="jdbc:mysql://127.0.0.1:3306/db_no?Unicode=true&amp;characterEncoding=UTF-8"/>
	</bean>
	
	
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:sql-map-config.xml"/>
		<property name="mapperLocations">
			<list>
				<value>classpath*:mybatis/**/*-mapper.xml</value>
			</list>
		</property>
	</bean>
	
	
	<!-- 扫描 basePackage下所有的接口，根据对应的mapper.xml为其生成代理类-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.suyin.*.mapper" />
<!-- 		<property name="sqlSessionFactory" ref="sqlSessionFactory" /> -->
	</bean>
	
	
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">   
    	<property name="dataSource" ref="dataSource"></property>
 	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="add*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="*" propagation="REQUIRED" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	
	<tx:annotation-driven transaction-manager="transactionManager" />
	<aop:config proxy-target-class="true">
		<aop:pointcut id="pc" expression="execution(* com.suyin.*.service..*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
	</aop:config>
	
	

</beans>
